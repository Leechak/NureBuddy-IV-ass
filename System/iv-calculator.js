
// IV Calculator System - ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ô‡πâ‡∏≥‡πÄ‡∏Å‡∏•‡∏∑‡∏≠‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
class IVCalculatorSystem {
  constructor() {
    this.alertSystem = null;
    this.dataManager = null;
    this.monitoringIntervals = new Map();
    this.criticalThresholds = {
      flowRate: { min: 5, max: 200 }, // ‡∏´‡∏¢‡∏î/‡∏ô‡∏≤‡∏ó‡∏µ
      ccPerHr: { min: 10, max: 500 }, // cc/hr
      timeRemaining: { critical: 30, warning: 60 }, // ‡∏ô‡∏≤‡∏ó‡∏µ
      balance: { critical: 1000, warning: 500 } // ml
    };
    this.init();
  }

  init() {
    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô
    if (typeof window !== 'undefined') {
      this.alertSystem = window.alertSystemManager || window.alertSystem;
      this.dataManager = window.dataManager;
    }

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    this.startGlobalMonitoring();
    console.log('üßÆ IV Calculator System initialized');
  }

  // ===============================
  // ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏•‡∏±‡∏Å
  // ===============================

  static dropPerMinToCcPerHr(dropPerMin, dropFactor = 20) {
    if (!dropPerMin || !dropFactor) return 0;
    return (dropPerMin * 60) / dropFactor;
  }

  static ccPerHrToDropPerMin(ccPerHr, dropFactor = 20) {
    if (!ccPerHr || !dropFactor) return 0;
    return (ccPerHr * dropFactor) / 60;
  }

  static calculateTimeToFinish(totalVolume, ccPerHr) {
    if (!totalVolume || !ccPerHr) return 0;
    return totalVolume / ccPerHr;
  }

  static quickDropCalculation(ccPerHr, dropFactor = 20) {
    if (dropFactor === 20) {
      return Math.round(ccPerHr / 3);
    } else if (dropFactor === 15) {
      return Math.round(ccPerHr / 4);
    } else if (dropFactor === 60) {
      return Math.round(ccPerHr);
    } else {
      return this.ccPerHrToDropPerMin(ccPerHr, dropFactor);
    }
  }

  static formatTime(hours) {
    if (!hours) return "0 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á 0 ‡∏ô‡∏≤‡∏ó‡∏µ";
    const wholeHours = Math.floor(hours);
    const minutes = Math.round((hours - wholeHours) * 60);
    return `${wholeHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
  }

  // ===============================
  // ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
  // ===============================

  checkFlowRateAlerts(bedId, currentFlow, orderedFlow, patientData) {
    const alerts = [];
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
    if (currentFlow < this.criticalThresholds.flowRate.min) {
      alerts.push({
        type: 'critical',
        category: 'flow_rate',
        message: `üö® ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•‡∏ï‡πà‡∏≥‡∏°‡∏≤‡∏Å (${currentFlow} ‡∏´‡∏¢‡∏î/‡∏ô‡∏≤‡∏ó‡∏µ) - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ`,
        bedId: bedId,
        severity: 'critical',
        actions: ['‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≠‡∏î‡∏ô‡πâ‡∏≥‡πÄ‡∏Å‡∏•‡∏∑‡∏≠', '‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô IV bag', '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô IV catheter']
      });
    } else if (currentFlow > this.criticalThresholds.flowRate.max) {
      alerts.push({
        type: 'critical',
        category: 'flow_rate',
        message: `üö® ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å (${currentFlow} ‡∏´‡∏¢‡∏î/‡∏ô‡∏≤‡∏ó‡∏µ) - ‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢!`,
        bedId: bedId,
        severity: 'critical',
        actions: ['‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ', '‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß', '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IV pump']
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á
    const flowDifference = Math.abs(currentFlow - orderedFlow);
    const percentDifference = (flowDifference / orderedFlow) * 100;

    if (percentDifference > 50) {
      alerts.push({
        type: 'warning',
        category: 'flow_variance',
        message: `‚ö†Ô∏è ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥: ‡∏™‡∏±‡πà‡∏á ${orderedFlow} ‡∏´‡∏¢‡∏î/‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏ï‡πà‡πÑ‡∏î‡πâ ${currentFlow} ‡∏´‡∏¢‡∏î/‡∏ô‡∏≤‡∏ó‡∏µ`,
        bedId: bedId,
        severity: 'warning',
        actions: ['‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•', '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå']
      });
    }

    return alerts;
  }

  checkTimeRemainingAlerts(bedId, timeRemainingHours, patientData) {
    const alerts = [];
    const timeRemainingMinutes = timeRemainingHours * 60;

    if (timeRemainingMinutes <= this.criticalThresholds.timeRemaining.critical) {
      alerts.push({
        type: 'critical',
        category: 'time_remaining',
        message: `üî• ‡∏ô‡πâ‡∏≥‡πÄ‡∏Å‡∏•‡∏∑‡∏≠‡∏à‡∏∞‡∏´‡∏°‡∏î‡πÉ‡∏ô ${Math.round(timeRemainingMinutes)} ‡∏ô‡∏≤‡∏ó‡∏µ - ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ!`,
        bedId: bedId,
        severity: 'critical',
        actions: ['‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ô‡πâ‡∏≥‡πÄ‡∏Å‡∏•‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà', '‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå', '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡∏°‡πà']
      });
    } else if (timeRemainingMinutes <= this.criticalThresholds.timeRemaining.warning) {
      alerts.push({
        type: 'warning',
        category: 'time_remaining',
        message: `‚è∞ ‡∏ô‡πâ‡∏≥‡πÄ‡∏Å‡∏•‡∏∑‡∏≠‡∏à‡∏∞‡∏´‡∏°‡∏î‡πÉ‡∏ô ${Math.round(timeRemainingMinutes)} ‡∏ô‡∏≤‡∏ó‡∏µ - ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß`,
        bedId: bedId,
        severity: 'warning',
        actions: ['‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ô‡πâ‡∏≥‡πÄ‡∏Å‡∏•‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà', '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á']
      });
    }

    return alerts;
  }

  checkSafetyAlerts(bedId, ccPerHr, patientWeight, patientAge) {
    const alerts = [];
    
    if (!patientWeight || !ccPerHr) return alerts;

    const mlPerKgPerHr = ccPerHr / patientWeight;

    // ‡πÄ‡∏î‡πá‡∏Å (‡∏≠‡∏≤‡∏¢‡∏∏ < 18)
    if (patientAge && patientAge < 18) {
      if (mlPerKgPerHr > 8) {
        alerts.push({
          type: 'critical',
          category: 'pediatric_safety',
          message: `üö® ‡πÄ‡∏î‡πá‡∏Å: ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≥‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å ${mlPerKgPerHr.toFixed(1)} ml/kg/hr - ‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏±‡∏ß‡πÉ‡∏à!`,
          bedId: bedId,
          severity: 'critical',
          actions: ['‡∏•‡∏î‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ', '‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå', '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ö‡∏ß‡∏°']
        });
      }
    } else {
      // ‡∏ú‡∏π‡πâ‡πÉ‡∏´‡∏ç‡πà
      if (mlPerKgPerHr > 15) {
        alerts.push({
          type: 'critical',
          category: 'adult_safety',
          message: `üö® ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≥‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å ${mlPerKgPerHr.toFixed(1)} ml/kg/hr - ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏†‡∏≤‡∏ß‡∏∞‡∏ô‡πâ‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô!`,
          bedId: bedId,
          severity: 'critical',
          actions: ['‡∏•‡∏î‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ', '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ö‡∏ß‡∏°', '‡∏ß‡∏±‡∏î I/O Balance']
        });
      } else if (mlPerKgPerHr > 10) {
        alerts.push({
          type: 'warning',
          category: 'adult_safety',
          message: `‚ö†Ô∏è ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≥‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á ${mlPerKgPerHr.toFixed(1)} ml/kg/hr - ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î`,
          bedId: bedId,
          severity: 'warning',
          actions: ['‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° I/O', '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£']
        });
      }
    }

    return alerts;
  }

  // ===============================
  // ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  // ===============================

  processAlerts(alerts) {
    alerts.forEach(alert => {
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      if (this.alertSystem) {
        this.alertSystem.addAlert(
          alert.bedId,
          alert.category,
          alert.message,
          alert.severity
        );

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á
        if (alert.severity === 'critical') {
          this.showCriticalAlert(alert);
          this.playAlertSound('critical');
        } else if (alert.severity === 'warning') {
          this.showWarningToast(alert);
          this.playAlertSound('warning');
        }

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô nurse notes
        if (this.dataManager) {
          this.dataManager.addNote(
            alert.bedId,
            `‚ö†Ô∏è IV Alert: ${alert.message}`,
            'iv_alert'
          );
        }
      }
    });
  }

  showCriticalAlert(alert) {
    if (!this.alertSystem) return;

    const actionsHTML = alert.actions.map(action => 
      `<li style="margin: 5px 0; padding: 8px; background: #fee2e2; border-radius: 6px;">‚Ä¢ ${action}</li>`
    ).join('');

    const alertContent = `
      <div style="text-align: center; padding: 20px;">
        <div style="font-size: 48px; margin-bottom: 15px;">üö®</div>
        <h3 style="color: #dc2626; margin-bottom: 15px;">‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡∏¥‡∏Å‡∏§‡∏ï</h3>
        <div style="background: #fef2f2; padding: 15px; border-radius: 10px; margin-bottom: 20px; border-left: 4px solid #dc2626;">
          <strong>‡πÄ‡∏ï‡∏µ‡∏¢‡∏á ${alert.bedId}:</strong><br>
          ${alert.message}
        </div>
        
        <div style="text-align: left; margin-bottom: 20px;">
          <h4 style="color: #1f2937; margin-bottom: 10px;">üìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥:</h4>
          <ul style="list-style: none; padding: 0;">
            ${actionsHTML}
          </ul>
        </div>

        <div style="display: flex; gap: 10px; justify-content: center;">
          <button onclick="ivCalculatorSystem.acknowledgeAlert('${alert.bedId}', 'critical')" 
                  style="background: #dc2626; color: white; padding: 12px 24px; border: none; border-radius: 8px; font-weight: 600; cursor: pointer;">
            ‚úÖ ‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö
          </button>
          <button onclick="ivCalculatorSystem.snoozeAlert('${alert.bedId}', 5)" 
                  style="background: #6b7280; color: white; padding: 12px 24px; border: none; border-radius: 8px; font-weight: 600; cursor: pointer;">
            ‚è∞ ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ
          </button>
        </div>
      </div>
    `;

    this.alertSystem.createModal({
      id: 'criticalIVAlert',
      title: 'üö® ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡∏¥‡∏Å‡∏§‡∏ï - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡πâ‡∏≥‡πÄ‡∏Å‡∏•‡∏∑‡∏≠',
      content: alertContent,
      size: 'medium',
      closable: false,
      className: 'critical-alert-modal'
    });
  }

  showWarningToast(alert) {
    if (!this.alertSystem) return;

    this.alertSystem.showToast({
      message: `‚ö†Ô∏è ‡πÄ‡∏ï‡∏µ‡∏¢‡∏á ${alert.bedId}: ${alert.message}`,
      type: 'warning',
      duration: 6000
    });
  }

  playAlertSound(type) {
    if (this.alertSystem && this.alertSystem.sounds) {
      if (type === 'critical' && this.alertSystem.sounds.critical) {
        this.alertSystem.sounds.critical();
      } else if (type === 'warning' && this.alertSystem.sounds.warning) {
        this.alertSystem.sounds.warning();
      }
    }
  }

  acknowledgeAlert(bedId, type) {
    if (this.alertSystem) {
      this.alertSystem.closeModal('criticalIVAlert');
      this.alertSystem.showToast({
        message: `‚úÖ ‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏ï‡∏µ‡∏¢‡∏á ${bedId} ‡πÅ‡∏•‡πâ‡∏ß`,
        type: 'success'
      });
    }
  }

  snoozeAlert(bedId, minutes) {
    if (this.alertSystem) {
      this.alertSystem.closeModal('criticalIVAlert');
      this.alertSystem.showToast({
        message: `‚è∞ ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏ï‡∏µ‡∏¢‡∏á ${bedId} ‡πÑ‡∏õ ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`,
        type: 'info'
      });

      // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà
      setTimeout(() => {
        this.alertSystem.showToast({
          message: `üîî ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ Snooze ‡πÄ‡∏ï‡∏µ‡∏¢‡∏á ${bedId} - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`,
          type: 'warning'
        });
      }, minutes * 60 * 1000);
    }
  }

  // ===============================
  // ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  // ===============================

  startBedMonitoring(bedId) {
    this.stopBedMonitoring(bedId);

    const interval = setInterval(() => {
      this.checkBedStatus(bedId);
    }, 30000); // ‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    this.monitoringIntervals.set(bedId, interval);
    console.log(`üîç Started monitoring bed ${bedId}`);
  }

  stopBedMonitoring(bedId) {
    const interval = this.monitoringIntervals.get(bedId);
    if (interval) {
      clearInterval(interval);
      this.monitoringIntervals.delete(bedId);
      console.log(`‚èπÔ∏è Stopped monitoring bed ${bedId}`);
    }
  }

  checkBedStatus(bedId) {
    if (!this.dataManager) return;

    const patientData = this.dataManager.getPatient(bedId);
    if (!patientData) return;

    const currentFlow = parseFloat(patientData.current_rate || patientData.rate || 0);
    const orderedFlow = parseFloat(patientData.rate || 0);
    const totalVolume = parseFloat(patientData.volume?.replace('mL', '') || 0);
    const ccPerHr = IVCalculatorSystem.dropPerMinToCcPerHr(currentFlow);
    
    let alerts = [];

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•
    alerts = alerts.concat(this.checkFlowRateAlerts(bedId, currentFlow, orderedFlow, patientData));

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    if (totalVolume > 0 && ccPerHr > 0) {
      const timeRemaining = IVCalculatorSystem.calculateTimeToFinish(totalVolume, ccPerHr);
      alerts = alerts.concat(this.checkTimeRemainingAlerts(bedId, timeRemaining, patientData));
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    if (patientData.weight) {
      alerts = alerts.concat(this.checkSafetyAlerts(
        bedId, 
        ccPerHr, 
        parseFloat(patientData.weight), 
        parseFloat(patientData.age || 0)
      ));
    }

    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    if (alerts.length > 0) {
      this.processAlerts(alerts);
    }
  }

  startGlobalMonitoring() {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏ï‡∏µ‡∏¢‡∏á‡∏ó‡∏∏‡∏Å 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    setInterval(() => {
      if (!this.dataManager) return;

      const maxBeds = window.MAX_BEDS || 8;
      for (let bedId = 1; bedId <= maxBeds; bedId++) {
        const patientData = this.dataManager.getPatient(bedId);
        if (patientData && patientData.patient_id) {
          this.checkBedStatus(bedId);
        }
      }
    }, 60000);
  }

  // ===============================
  // ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  // ===============================

  calculateAdvancedWithAlerts(params) {
    const {
      bedId,
      dropPerMin,
      ccPerHr,
      totalVolume,
      dropFactor = 20,
      patientWeight,
      patientAge,
      fluidType = 'normal'
    } = params;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    const result = {
      dropFactor: dropFactor,
      originalDropPerMin: parseFloat(dropPerMin) || 0,
      originalCcPerHr: parseFloat(ccPerHr) || 0,
      totalVolume: parseFloat(totalVolume) || 0
    };

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
    if (dropPerMin && !ccPerHr) {
      result.calculatedCcPerHr = IVCalculatorSystem.dropPerMinToCcPerHr(dropPerMin, dropFactor);
    } else if (ccPerHr && !dropPerMin) {
      result.calculatedDropPerMin = IVCalculatorSystem.ccPerHrToDropPerMin(ccPerHr, dropFactor);
      result.quickDropPerMin = IVCalculatorSystem.quickDropCalculation(ccPerHr, dropFactor);
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏´‡∏°‡∏î
    const finalCcPerHr = result.calculatedCcPerHr || result.originalCcPerHr;
    if (totalVolume && finalCcPerHr) {
      result.timeToFinishHours = IVCalculatorSystem.calculateTimeToFinish(totalVolume, finalCcPerHr);
      result.timeToFinishFormatted = IVCalculatorSystem.formatTime(result.timeToFinishHours);
      result.estimatedFinishTime = new Date(Date.now() + (result.timeToFinishHours * 60 * 60 * 1000)).toLocaleString('th-TH');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ bedId
    if (bedId) {
      let alerts = [];

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•
      const currentFlow = result.originalDropPerMin || result.calculatedDropPerMin || 0;
      const orderedFlow = result.originalDropPerMin || 0;
      alerts = alerts.concat(this.checkFlowRateAlerts(bedId, currentFlow, orderedFlow, {}));

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
      if (result.timeToFinishHours) {
        alerts = alerts.concat(this.checkTimeRemainingAlerts(bedId, result.timeToFinishHours, {}));
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
      if (patientWeight && finalCcPerHr) {
        alerts = alerts.concat(this.checkSafetyAlerts(bedId, finalCcPerHr, patientWeight, patientAge));
      }

      // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      if (alerts.length > 0) {
        result.alerts = alerts;
        this.processAlerts(alerts);
      }
    }

    return result;
  }

  // ===============================
  // UI Components
  // ===============================

  createAdvancedCalculatorModal(bedId = null) {
    const patientData = bedId ? (this.dataManager?.getPatient(bedId) || null) : null;
    
    const modalContent = `
      <div style="padding: 20px;">
        <div style="text-align: center; margin-bottom: 25px;">
          <div style="font-size: 48px; margin-bottom: 10px;">üßÆ</div>
          <h3 style="color: #1e293b; margin-bottom: 5px;">‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ô‡πâ‡∏≥‡πÄ‡∏Å‡∏•‡∏∑‡∏≠‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞</h3>
          <p style="color: #64748b; margin: 0;">‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</p>
        </div>

        <form id="advancedIVForm" style="max-width: 600px; margin: 0 auto;">
          ${bedId ? `
            <div style="background: #f0fdf4; padding: 15px; border-radius: 10px; margin-bottom: 20px; border-left: 4px solid #22c55e;">
              <strong>üõèÔ∏è ‡πÄ‡∏ï‡∏µ‡∏¢‡∏á ${bedId}</strong><br>
              ${patientData ? `üë§ ${patientData.patient_id}` : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢'}
            </div>
          ` : `
            <div style="margin-bottom: 20px;">
              <label style="display: block; margin-bottom: 5px; font-weight: 600;">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ï‡∏µ‡∏¢‡∏á (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö):</label>
              <select id="bedSelect" style="width: 100%; padding: 10px; border: 2px solid #e2e8f0; border-radius: 8px;">
                <option value="">-- ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ï‡∏µ‡∏¢‡∏á --</option>
                ${this.generateBedOptions()}
              </select>
            </div>
          `}

          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">
            <div>
              <label style="display: block; margin-bottom: 5px; font-weight: 600;">‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£‡∏ô‡πâ‡∏≥‡πÄ‡∏Å‡∏•‡∏∑‡∏≠ (mL):</label>
              <input type="number" id="totalVolume" placeholder="1000" min="1" style="width: 100%; padding: 10px; border: 2px solid #e2e8f0; border-radius: 8px;" value="${patientData?.volume?.replace('mL', '') || ''}">
            </div>
            <div>
              <label style="display: block; margin-bottom: 5px; font-weight: 600;">Drop Factor:</label>
              <select id="dropFactor" style="width: 100%; padding: 10px; border: 2px solid #e2e8f0; border-radius: 8px;">
                <option value="10">10 ‡∏´‡∏¢‡∏î/cc (‡πÄ‡∏î‡πá‡∏Å)</option>
                <option value="15">15 ‡∏´‡∏¢‡∏î/cc</option>
                <option value="20" selected>20 ‡∏´‡∏¢‡∏î/cc (‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô)</option>
                <option value="60">60 ‡∏´‡∏¢‡∏î/cc (Micro set)</option>
              </select>
            </div>
          </div>

          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">
            <div>
              <label style="display: block; margin-bottom: 5px; font-weight: 600;">‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ (kg):</label>
              <input type="number" id="patientWeight" placeholder="70" min="1" style="width: 100%; padding: 10px; border: 2px solid #e2e8f0; border-radius: 8px;" value="${patientData?.weight || ''}">
            </div>
            <div>
              <label style="display: block; margin-bottom: 5px; font-weight: 600;">‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏õ‡∏µ):</label>
              <input type="number" id="patientAge" placeholder="30" min="0" style="width: 100%; padding: 10px; border: 2px solid #e2e8f0; border-radius: 8px;" value="${patientData?.age || ''}">
            </div>
          </div>

          <div style="background: #f8fafc; padding: 20px; border-radius: 10px; margin-bottom: 20px;">
            <h4 style="margin: 0 0 15px 0; color: #1e293b;">‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á:</h4>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
              <div>
                <label style="display: block; margin-bottom: 5px; font-weight: 600;">‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏î (‡∏´‡∏¢‡∏î/‡∏ô‡∏≤‡∏ó‡∏µ):</label>
                <input type="number" id="dropPerMin" placeholder="30" min="0" style="width: 100%; padding: 10px; border: 2px solid #e2e8f0; border-radius: 8px;" value="${patientData?.rate || ''}">
              </div>
              <div>
                <label style="display: block; margin-bottom: 5px; font-weight: 600;">‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏• (cc/hr):</label>
                <input type="number" id="ccPerHr" placeholder="100" min="0" style="width: 100%; padding: 10px; border: 2px solid #e2e8f0; border-radius: 8px;">
              </div>
            </div>
          </div>

          <div style="text-align: center; margin-bottom: 20px;">
            <button type="submit" style="background: linear-gradient(135deg, #0ea5e9, #0284c7); color: white; border: none; padding: 15px 40px; border-radius: 10px; font-weight: 700; font-size: 16px; cursor: pointer; box-shadow: 0 4px 15px rgba(14, 165, 233, 0.3);">
              üßÆ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
            </button>
          </div>

          <div id="calculationResults" style="display: none;"></div>
        </form>
      </div>
    `;

    if (this.alertSystem) {
      const modal = this.alertSystem.createModal({
        id: 'advancedIVCalculator',
        title: 'üßÆ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ô‡πâ‡∏≥‡πÄ‡∏Å‡∏•‡∏∑‡∏≠‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞',
        content: modalContent,
        size: 'large',
        closable: true
      });

      this.setupCalculatorEventListeners(modal, bedId);
      return modal;
    }
  }

  setupCalculatorEventListeners(modal, bedId) {
    const form = modal.querySelector('#advancedIVForm');
    if (form) {
      form.addEventListener('submit', (e) => {
        e.preventDefault();
        this.handleAdvancedCalculation(modal, bedId);
      });
    }
  }

  handleAdvancedCalculation(modal, bedId) {
    const formData = {
      bedId: bedId || modal.querySelector('#bedSelect')?.value || null,
      totalVolume: modal.querySelector('#totalVolume').value,
      dropFactor: modal.querySelector('#dropFactor').value,
      patientWeight: modal.querySelector('#patientWeight').value,
      patientAge: modal.querySelector('#patientAge').value,
      dropPerMin: modal.querySelector('#dropPerMin').value,
      ccPerHr: modal.querySelector('#ccPerHr').value
    };

    if (!formData.dropPerMin && !formData.ccPerHr) {
      if (this.alertSystem) {
        this.alertSystem.showToast({
          message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏î ‡∏´‡∏£‡∏∑‡∏≠ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•',
          type: 'error'
        });
      }
      return;
    }

    const result = this.calculateAdvancedWithAlerts(formData);
    this.displayCalculationResults(modal, result);
  }

  displayCalculationResults(modal, result) {
    const resultsDiv = modal.querySelector('#calculationResults');
    if (!resultsDiv) return;

    let html = `
      <div style="background: linear-gradient(135deg, #f0fdf4, #dcfce7); padding: 20px; border-radius: 10px; border: 2px solid #22c55e;">
        <h4 style="color: #166534; margin-bottom: 15px;">üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì</h4>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
    `;

    if (result.calculatedCcPerHr) {
      html += `
        <div style="background: white; padding: 15px; border-radius: 8px;">
          <div style="font-weight: 700; color: #1e293b;">‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•</div>
          <div style="font-size: 18px; color: #0ea5e9;">${result.calculatedCcPerHr.toFixed(1)} cc/hr</div>
        </div>
      `;
    }

    if (result.calculatedDropPerMin) {
      html += `
        <div style="background: white; padding: 15px; border-radius: 8px;">
          <div style="font-weight: 700; color: #1e293b;">‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏î</div>
          <div style="font-size: 18px; color: #0ea5e9;">${result.calculatedDropPerMin.toFixed(1)} ‡∏´‡∏¢‡∏î/‡∏ô‡∏≤‡∏ó‡∏µ</div>
        </div>
      `;
    }

    if (result.timeToFinishFormatted) {
      html += `
        <div style="background: white; padding: 15px; border-radius: 8px;">
          <div style="font-weight: 700; color: #1e293b;">‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏´‡∏°‡∏î</div>
          <div style="font-size: 18px; color: #ef4444;">${result.timeToFinishFormatted}</div>
        </div>
      `;
    }

    if (result.estimatedFinishTime) {
      html += `
        <div style="background: white; padding: 15px; border-radius: 8px;">
          <div style="font-weight: 700; color: #1e293b;">‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏´‡∏°‡∏î</div>
          <div style="font-size: 14px; color: #64748b;">${result.estimatedFinishTime}</div>
        </div>
      `;
    }

    html += '</div>';

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (result.alerts && result.alerts.length > 0) {
      html += `
        <div style="margin-top: 20px; padding: 15px; background: #fef2f2; border-radius: 8px; border-left: 4px solid #ef4444;">
          <h5 style="color: #dc2626; margin-bottom: 10px;">‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h5>
          ${result.alerts.map(alert => `
            <div style="margin-bottom: 8px; font-size: 14px; color: #991b1b;">
              ‚Ä¢ ${alert.message}
            </div>
          `).join('')}
        </div>
      `;
    }

    html += '</div>';

    resultsDiv.innerHTML = html;
    resultsDiv.style.display = 'block';
  }

  generateBedOptions() {
    if (!this.dataManager) return '';

    let options = '';
    const maxBeds = window.MAX_BEDS || 8;
    
    for (let i = 1; i <= maxBeds; i++) {
      const patientData = this.dataManager.getPatient(i);
      if (patientData && patientData.patient_id) {
        options += `<option value="${i}">‡πÄ‡∏ï‡∏µ‡∏¢‡∏á ${i} - ${patientData.patient_id}</option>`;
      }
    }
    return options;
  }
}

// Initialize the IV Calculator System
let ivCalculatorSystem;
if (typeof window !== 'undefined' && !window.ivCalculatorSystem) {
  ivCalculatorSystem = new IVCalculatorSystem();
  window.ivCalculatorSystem = ivCalculatorSystem;
  window.IVCalculatorSystem = IVCalculatorSystem;
} else if (typeof window !== 'undefined') {
  ivCalculatorSystem = window.ivCalculatorSystem;
} else {
  ivCalculatorSystem = new IVCalculatorSystem();
}

// Export ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ES modules
export { IVCalculatorSystem, ivCalculatorSystem };

// Fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CommonJS
if (typeof module !== 'undefined' && module.exports) {
  module.exports = { IVCalculatorSystem, ivCalculatorSystem };
}
